{
	"info": {
		"_postman_id": "f723343a-d6a8-4d7f-b86b-afb36d174b7e",
		"name": "Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://swapi.co/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d020f5b5-3282-46ee-bcef-75880a7ccf27",
						"exec": [
							"//1. Correct response format JSON",
							"pm.test(\"Correct response format JSON\", function(){",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"//2. We have all the declored fields in the response",
							"pm.test(\"Check that we have all declared fields\", function(){",
							"    const jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"people\");",
							"    pm.expect(jsonData).to.have.property(\"planets\");",
							"    pm.expect(jsonData).to.have.property(\"films\");",
							"    pm.expect(jsonData).to.have.property(\"species\");",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");",
							"    pm.expect(jsonData).to.have.property(\"starships\");",
							"});",
							"",
							"//3. Field value is not NULL",
							"pm.test(\"Check if value is not NULL\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(null);",
							"    pm.expect(jsonData.planets).not.equal(null);",
							"    pm.expect(jsonData.films).not.equal(null);",
							"    pm.expect(jsonData.species).not.equal(null);",
							"    pm.expect(jsonData.starships).not.equal(null);",
							"});",
							"",
							"//4. Check if value is not empty",
							"pm.test(\"Check if value is not empty\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(\"\");",
							"    pm.expect(jsonData.planets).not.equal(\"\");",
							"    pm.expect(jsonData.films).not.equal(\"\");",
							"    pm.expect(jsonData.species).not.equal(\"\");",
							"    pm.expect(jsonData.starships).not.equal(\"\");",
							"});",
							"",
							"//5. Check if field corresponds to a specific value",
							"pm.test(\"Check if field corresponds to a specific value\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.co/api/people/\");",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.co/api/planets/\");",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.co/api/films/\");",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.co/api/species/\");",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.co/api/vehicles/\");",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.co/api/starships/\");",
							"});",
							"",
							"//6. Status code is 200",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//7. Status message is OK",
							"pm.test(\"Status message is OK\", function(){",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"//8. Response time is less than 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"//9. There is a specific header in the response",
							"pm.test(\"There is a specific header in the response\", function(){",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"//10. The response has a specific with a specific value",
							"pm.test(\"The response has a specific with a specific value\", function(){",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"//11. Cookie exists",
							"pm.test(\"Cookie exists\", function(){",
							"    pm.cookies.has(\"__cfduid\");",
							"});",
							"",
							"//12. Cookie has value",
							"pm.test(\"Cookie has value\", function(){",
							"    try{",
							"        var MY_COOKIE = pm.cookies.get(\"__cfduid\");",
							"        console.log(MY_COOKIE);",
							"    } catch(e) {",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Serge\"}"
				},
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.co/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "afeb6e33-28dc-40aa-b9c7-12d3a91edae6",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    //specify the type of object",
							"    \"type\":\"object\",",
							"    //specify requires properties",
							"    \"required\":[\"name\",\"homeworld\",\"films\",\"species\",\"vehicles\",\"starships\"],",
							"    // describe the properties",
							"    \"properties\": {",
							"        \"name\":{\"type\": \"string\"},",
							"        \"homeworld\":{\"type\": \"string\"},",
							"        \"films\":{",
							"            \"type\": \"array\",",
							"            \"items\":{\"type\": \"string\"}",
							"        },",
							"        \"species\":{",
							"            \"type\": \"array\",",
							"            \"items\":{\"type\": \"string\"}",
							"        },",
							"        \"vehicles\":{",
							"            \"type\": \"array\",",
							"            \"items\":{\"type\": \"string\"}",
							"        },",
							"        \"starships\":{",
							"            \"type\": \"array\",",
							"            \"items\":{\"type\": \"string\"}",
							"        },",
							"    }",
							"};",
							"",
							"pm.test('Body is correst', function(){",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Serge\"}"
				},
				"url": {
					"raw": "https://swapi.co/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}